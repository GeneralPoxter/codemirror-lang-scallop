# Constant Declarations

const bool_a = true
const bool_b : bool = false

const num_a = 1
const num_b = 0.1
const num_c : i32 = 2

const str_a = "hello"
const str_b : String = "one\"\\two"

const x = y
const x : MyType = S

const LEFT = 0, UP = 1, RIGHT = 2, DOWN = 3

==>

Program(
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,Constant(Boolean)))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier,Type),AssignOp,Constant(Boolean)))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,Constant(Number)))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,Constant(Number)))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier,Type),AssignOp,Constant(Number)))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,Constant(String)))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier,Type),AssignOp,Constant(String)))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,Constant(Var(Identifier))))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier,Type(CustomType(Identifier))),AssignOp,Constant(Var(Identifier))))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,Constant(Number)),ListItem(Var(Identifier),AssignOp,Constant(Number)),ListItem(Var(Identifier),AssignOp,Constant(Number)),ListItem(Var(Identifier),AssignOp,Constant(Number))))
)

# Type Declarations

type a = i32
type b <: bool

type parent(String, String)
type parent(a: String, b: String)

type mixAndMatch(bound String, b: String, String)
type $mixAndMatch(a, bound b: bool, c: char) -> i128

type $foo(String, Tensor, i32) -> u64
type $py_eval_number(s: String) -> f32

type face_name(bound face: Tensor, bound list: String, name: String)

type Action = LEFT | UP | RIGHT | DOWN
type Color = RED | GREEN = 10 | BLUE

==>

Program(
  Item(TypeDecl(Keyword(type),CustomType(Identifier),AssignOp,Type)),
  Item(TypeDecl(Keyword(type),CustomType(Identifier),AssignOp,Type)),
  Item(TypeDecl(Keyword(type),ListItem(Identifier,ParamList(ListItem(Type),ListItem(Type))))),
  Item(TypeDecl(Keyword(type),ListItem(Identifier,ParamList(ListItem(Var(Identifier,Type)),ListItem(Var(Identifier,Type)))))),
  Item(TypeDecl(Keyword(type),ListItem(Identifier,ParamList(ListItem(Adornment,Type),ListItem(Var(Identifier,Type)),ListItem(Type))))),
  Item(TypeDecl(Keyword(type),FFIdentifier,ParamList(ListItem(Var(Identifier)),ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type))),Type)),
  Item(TypeDecl(Keyword(type),FFIdentifier,ParamList(ListItem(Type),ListItem(Type),ListItem(Type)),Type)),
  Item(TypeDecl(Keyword(type),FFIdentifier,ParamList(ListItem(Var(Identifier,Type))),Type)),
  Item(TypeDecl(Keyword(type),ListItem(Identifier,ParamList(ListItem(Adornment,Var(Identifier,Type)),ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type)))))),
  Item(TypeDecl(Keyword(type),EnumTypeIdentifier(Identifier),AssignOp,ListItem(EnumConst(Identifier)),ListItem(EnumConst(Identifier)),ListItem(EnumConst(Identifier)),ListItem(EnumConst(Identifier)))),
  Item(TypeDecl(Keyword(type),EnumTypeIdentifier(Identifier),AssignOp,ListItem(EnumConst(Identifier)),ListItem(EnumConst(Identifier,AssignOp,Constant(Number))),ListItem(EnumConst(Identifier))))
)

# Fact Declarations

rel empty = {}
rel digit = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}

rel object_color = {
  0.98::(0, "red"), 0.01::(0, "green"), 0.01::(0, "blue"),
  0.01::(1, "red"), 0.98::(1, "green"), 0.01::(1, "blue"),
  0.02::(2, "red"), 0.97::(2, "green"), 0.01::(2, "blue"),
}

rel bool_tag = { true::(3.5,); false::(4.5) }

rel mix_tag = {("0"), 0.5::"1", true::"2"}

==>

Program(
  Item(RelationDecl(FactSetDecl(Keyword(rel),RelationIdentifier(Identifier),AssignOp,FactSet))),
  Item(RelationDecl(FactSetDecl(Keyword(rel),RelationIdentifier(Identifier),AssignOp,FactSet(ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))),ListItem(ConstTuple(Constant(String))))))),
  Item(RelationDecl(FactSetDecl(Keyword(rel),RelationIdentifier(Identifier),AssignOp,FactSet(ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))),ListItem(Tagged(Tag(Number),ConstTuple(ListItem(Constant(Number)),ListItem(Constant(String))))))))),
  Item(RelationDecl(FactSetDecl(Keyword(rel),RelationIdentifier(Identifier),AssignOp,FactSet(ListItem(Tagged(Tag(Boolean),ConstTuple(ListItem(Constant(Number))))),ListItem(Tagged(Tag(Boolean),ConstTuple(ListItem(Constant(Number))))))))),
  Item(RelationDecl(FactSetDecl(Keyword(rel),RelationIdentifier(Identifier),AssignOp,FactSet(ListItem(ConstTuple(ListItem(Constant(String)))),ListItem(Tagged(Tag(Number),ConstTuple(Constant(String)))),ListItem(Tagged(Tag(Boolean),ConstTuple(Constant(String))))))))
)

# Rule Declarations

rel grandparent(a, b) = parent(a, b), parent(b, c)

rel equalTo(a, b) = num(a), num(b), a == b
rel lessThan(a, b) = num(a), num(b), a < b
rel gte(a, b) = num(a), num(b), a >= b

rel exists(a) = exist1(a) \/ exist2(b)
rel sum(a + b) = digit1(a) /\ digit2(b)

rel 1.0::eq(a == b) :- bool1(a), bool2(b)

rel andRel(a && b) :- bool1(a), bool2(b)
rel negRel(!a, -b) :- bool1(a), num2(b)

rel negStr((-a) as String) = num(a)

rel constConstraint(x) = a and b or c implies d

rel derived_kinship(p1, p3, r3) = p1 != p3 and derived_kinship(p1, p2, r1) and derived_kinship(p2, p3, r2) and composition(r2, r1, r3)

==>

Program(
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))),LogicOp,Formula(Constraint(Constraint(Var(Identifier)),CompareOp,Constraint(Var(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))),LogicOp,Formula(Constraint(Constraint(Var(Identifier)),CompareOp,Constraint(Var(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))),LogicOp,Formula(Constraint(Constraint(Var(Identifier)),CompareOp,Constraint(Var(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Expr(Var(Identifier)),ArithOp,Expr(Var(Identifier)))))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Tagged(Tag(Number),Atom(Identifier,ParamList(ListItem(Expr(Expr(Var(Identifier)),CompareOp,Expr(Var(Identifier))))))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Expr(Var(Identifier)),LogicOp,Expr(Var(Identifier)))))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(LogicOp,Expr(Var(Identifier)))),ListItem(Expr(ArithOp,Expr(Var(Identifier)))))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Expr(Expr(ArithOp,Expr(Var(Identifier)))),Keyword(as),Type)))),AssignOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Formula(Constraint(Var(Identifier))),WordOp,Formula(Constraint(Var(Identifier)))),WordOp,Formula(Constraint(Var(Identifier)))),WordOp,Formula(Constraint(Var(Identifier))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Formula(Constraint(Constraint(Var(Identifier)),CompareOp,Constraint(Var(Identifier)))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))))))
)

# Query Declarations

query your_mom

==>

Program(
  Item(QueryDecl(Keyword(query),Identifier))
)

# Aggregations

rel num_animals(n) :- n = count(o: name(o, "animal"))
rel num_edges(n) = n := count(a, b: edge(a, b))

rel num_obj_per_color(col, num) = num := count(obj: obj_color(obj, col))
rel num_obj_per_color(col, num) = num := count(obj: obj_color(obj, col) where col: colors(col))

rel total_sales(s) = s := sum(sp: sales_1(p, sp))

rel best_student(n) = _ := max[n](s: exam_grades(n, s))

rel path(a, c) = exists(b: path(a, b) and edge(b, c))

rel target(b) = b := forall(o: object(o) implies obj_shape(o, SPHERE))

rel identity(id, name) = name := top<1>(name: face_name(img, $string_concat(list), name), face_image(id, img), names(list))
rel save_image($save_image(img, $string_concat("tagged_", img_name))) = tag_image(n as u32, img), n := count!(id: identity(id, name)), img_name(img_name)

==>

Program(
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Constant(String))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,ListItem(Var(Identifier)),ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))),Keyword(where),ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,AggregationArgs(ListItem(Var(Identifier))),ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Aggregator,ListItem(Var(Identifier)),Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,ListItem(Var(Identifier)),Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator(Number),ListItem(Var(Identifier)),Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier)))))),ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Constant(String))),ListItem(Expr(Var(Identifier))))))))))),AssignOp,Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Expr(Var(Identifier)),Keyword(as),Type)),ListItem(Expr(Var(Identifier)))))),LogicOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,ListItem(Var(Identifier)),Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))))),LogicOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))))))
)

# FA Type Declarations

@gpt_encoder type $embed_text(String) -> Tensor

@face_detection(["cropped-image"], dump_image=true)
type face(bound img: Tensor, id: u32, face_img: Tensor)

@clip(["cat", "dog"], prompt="a photo of a {{}}")
type cat_or_dog(bound img: Tensor, cat_or_dog: String)

@owl_vit(
  object_queries=["cube", "sphere", "cylinder"],
  output_fields=["class", "cropped-image"],
  input_obj_count=true,
  score_threshold=0.01,
  score_multiplier=1,
  expand_crop_region=10,
  dump_image=true
)
type find_shapes(
  bound img: Tensor,
  bound obj_count: u32,
  id: u32,
  class: String,
  cropped_image: Tensor,
)

@gpt_extract_info(
  header="Please extract dates and their relationships from the provided question.",
  prompts=[
    "What are the mentioned MM/DD/YYYY dates in JSON format?",
    "What is the goal in JSON format?",
    "What are the relationships of the dates in JSON format?"
  ],
  examples=[
    (
      ["Yesterday is February 14, 2019. What is the date 1 month ago?"],
      [
        [("yesterday", "02/14/2019")],
        [("1-month-ago")],
        [("yesterday", "today", "1 day"), ("1-month-ago", "today", "1 month")]
      ]
    ),
  ],
  model="gpt-4",
  cot=[false,false,true],
  debug=true,
)
type extract_mentioned_date(bound question: String, label: String, date: DateTime),
     extract_goal          (bound question: String, goal: String),
     extract_relationship  (bound question: String, earlier_date: String, later_date: String, diff: Duration)

==>

Program(
  Item(TypeDecl(FAIdentifier,Keyword(type),FFIdentifier,ParamList(ListItem(Type)),Type)),
  Item(TypeDecl(FAIdentifier,ParamList(ListItem(FAParam(FAParamVal(ListItem(FAParamVal(String))))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(Boolean)))),Keyword(type),ListItem(Identifier,ParamList(ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type)),ListItem(Var(Identifier,Type)))))),
  Item(TypeDecl(FAIdentifier,ParamList(ListItem(FAParam(FAParamVal(ListItem(FAParamVal(String)),ListItem(FAParamVal(String))))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(String)))),Keyword(type),ListItem(Identifier,ParamList(ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type)))))),
  Item(TypeDecl(FAIdentifier,ParamList(ListItem(FAParam(Identifier,AssignOp,FAParamVal(ListItem(FAParamVal(String)),ListItem(FAParamVal(String)),ListItem(FAParamVal(String))))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(ListItem(FAParamVal(String)),ListItem(FAParamVal(String))))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(Boolean))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(Number))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(Number))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(Number))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(Boolean)))),Keyword(type),ListItem(Identifier,ParamList(ListItem(Adornment,Var(Identifier,Type)),ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type)),ListItem(Var(Identifier,Type)),ListItem(Var(Identifier,Type)))))),
  Item(TypeDecl(FAIdentifier,ParamList(ListItem(FAParam(Identifier,AssignOp,FAParamVal(String))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(ListItem(FAParamVal(String)),ListItem(FAParamVal(String)),ListItem(FAParamVal(String))))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(ListItem(FAParamVal(ListItem(FAParamVal(ListItem(FAParamVal(String)))),ListItem(FAParamVal(ListItem(FAParamVal(ListItem(FAParamVal(ListItem(FAParamVal(String)),ListItem(FAParamVal(String)))))),ListItem(FAParamVal(ListItem(FAParamVal(ListItem(FAParamVal(String)))))),ListItem(FAParamVal(ListItem(FAParamVal(ListItem(FAParamVal(String)),ListItem(FAParamVal(String)),ListItem(FAParamVal(String)))),ListItem(FAParamVal(ListItem(FAParamVal(String)),ListItem(FAParamVal(String)),ListItem(FAParamVal(String))))))))))))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(String))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(ListItem(FAParamVal(Boolean)),ListItem(FAParamVal(Boolean)),ListItem(FAParamVal(Boolean))))),ListItem(FAParam(Identifier,AssignOp,FAParamVal(Boolean)))),Keyword(type),ListItem(Identifier,ParamList(ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type)),ListItem(Var(Identifier,Type)))),ListItem(Identifier,ParamList(ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type)))),ListItem(Identifier,ParamList(ListItem(Adornment,Var(Identifier,Type)),ListItem(Var(Identifier,Type)),ListItem(Var(Identifier,Type)),ListItem(Var(Identifier,Type))))))
)

# Abstract Data Types

type IntList = Nil() | Cons(i32, List)

const MY_LIST = Cons(1, Cons(2, Cons(3, Nil())))
const MY_EXPR = Sub(Add(Int(1), Int(3)), Int(5))

rel matches_substr(r, i, i) = case r is Star(_) and input_string(s) and string_chars(s, i, _)
rel matches_substr(r, b, e) = case r is Star(r1) and matches_substr(r, b, c) and matches_substr(r1, c, e)

rel equivalent(e, new Add(new Add(a, b), c)) = case e is Add(a, Add(b, c))

==>

Program(
  Item(TypeDecl(Keyword(type),ADTIdentifier(Identifier),AssignOp,ListItem(Constructor(Identifier),ParamList),ListItem(Constructor(Identifier),ParamList(ListItem(Type),ListItem(Type(CustomType(Identifier))))))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,ConstEntity(Constructor(Identifier),ParamList(ListItem(Constant(Number)),ListItem(ConstEntity(Constructor(Identifier),ParamList(ListItem(Constant(Number)),ListItem(ConstEntity(Constructor(Identifier),ParamList(ListItem(Constant(Number)),ListItem(ConstEntity(Constructor(Identifier),ParamList))))))))))))),
  Item(ConstDecl(Keyword(const),ListItem(Var(Identifier),AssignOp,ConstEntity(Constructor(Identifier),ParamList(ListItem(ConstEntity(Constructor(Identifier),ParamList(ListItem(ConstEntity(Constructor(Identifier),ParamList(ListItem(Constant(Number))))),ListItem(ConstEntity(Constructor(Identifier),ParamList(ListItem(Constant(Number)))))))),ListItem(ConstEntity(Constructor(Identifier),ParamList(ListItem(Constant(Number)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Keyword(case),Var(Identifier),Keyword(is),Entity(Constructor(Identifier),ParamList(ListItem(Var(Identifier))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Keyword(case),Var(Identifier),Keyword(is),Entity(Constructor(Identifier),ParamList(ListItem(Var(Identifier))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Keyword(new),Constructor(Identifier),ParamList(ListItem(Expr(Keyword(new),Constructor(Identifier),ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))),ListItem(Expr(Var(Identifier)))))))),AssignOp,Formula(Keyword(case),Var(Identifier),Keyword(is),Entity(Constructor(Identifier),ParamList(ListItem(Var(Identifier)),ListItem(Entity(Constructor(Identifier),ParamList(ListItem(Var(Identifier)),ListItem(Var(Identifier)))))))))))
)

# Foreign Predicates

rel relevant(id) = id := top<2>(id: question(q) and context(id, c) and soft_eq<Tensor>($embed_text(q), $embed_text(c)))
rel match_pos(pid) = product(pid, ptitle) and pos_attr(p) and soft_eq<Tensor>($embed_text(p), $embed_text(ptitle))
rel match_neg(pid) = product(pid, ptitle) and neg_attr(n) and soft_neq<Tensor>($embed_text(n), $embed_text(ptitle))

==>

Program(
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator(Number),ListItem(Var(Identifier)),Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier)))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier))))))),WordOp,Formula(Atom(Identifier,Type,ParamList(ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier)))))),ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier))))))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))),WordOp,Formula(Atom(Identifier,Type,ParamList(ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier)))))),ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier))))))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))),AssignOp,Formula(Formula(Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))),ListItem(Expr(Var(Identifier)))))),WordOp,Formula(Atom(Identifier,ParamList(ListItem(Expr(Var(Identifier))))))),WordOp,Formula(Atom(Identifier,Type,ParamList(ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier)))))),ListItem(Expr(FFIdentifier,ParamList(ListItem(Expr(Var(Identifier)))))))))))))
)
