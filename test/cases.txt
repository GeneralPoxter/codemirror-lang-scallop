# Constant Declarations

const bool_a = true
const bool_b : bool = false

const num_a = 1
const num_b = 0.1
const num_c : i32 = 2

const str_a = "hello"
const str_b : String = "one\"\\two"

==>

Program(
  Item(Const_Decl(Keyword(const),Var(Identifier),Constant(Boolean))),
  Item(Const_Decl(Keyword(const),Var(Identifier,Type),Constant(Boolean))),
  Item(Const_Decl(Keyword(const),Var(Identifier),Constant(Number))),
  Item(Const_Decl(Keyword(const),Var(Identifier),Constant(Number))),
  Item(Const_Decl(Keyword(const),Var(Identifier,Type),Constant(Number))),Item(Const_Decl(Keyword(const),Var(Identifier),Constant(String))),Item(Const_Decl(Keyword(const),Var(Identifier,Type),Constant(String)))
)

# Type Declarations

type a = i32
type b <: bool
type parent(String, String)
type parent(a: String, b: String)
type extract_mentioned_date (question: String, label: String, date: DateTime),
     extract_goal           (question: String, goal: String),
     extract_relationship   (question: String, earlier_date: String, later_date: String, diff: Duration),

==>

Program(
  Item(Type_Decl(Keyword(type),Identifier,Type)),Item(Type_Decl(Keyword(type),Identifier,Type)),
  Item(Type_Decl(Keyword(type),Identifier,Param_List(Type,Type))),
  Item(Type_Decl(Keyword(type),Identifier,Param_List(Var(Identifier,Type),Var(Identifier,Type)))),
  Item(Type_Decl(Keyword(type),Identifier,Param_List(Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type)),Identifier,Param_List(Var(Identifier,Type),Var(Identifier,Type)),Identifier,Param_List(Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type))))
)

# Fact Declarations

rel empty = {}
rel digit = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
rel object_color = {
  0.98::(0, "red"), 0.01::(0, "green"), 0.01::(0, "blue"),
  0.01::(1, "red"), 0.98::(1, "green"), 0.01::(1, "blue"),
  0.02::(2, "red"), 0.97::(2, "green"), 0.01::(2, "blue"),
}
rel bool_tag = { true::(3.5,); false::(4.5) }

==>

Program(
  Item(Relation_Decl(Facts_Set_Decl(Keyword(rel),Identifier,Facts_Set))),
  Item(Relation_Decl(Facts_Set_Decl(Keyword(rel),Identifier,Facts_Set(Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)),Const_Tuple(Constant(String)))))),
  Item(Relation_Decl(Facts_Set_Decl(Keyword(rel),Identifier,Facts_Set(Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))),Tagged(Tag(Number),Const_Tuple(Constant(Number),Constant(String))))))),
  Item(Relation_Decl(Facts_Set_Decl(Keyword(rel),Identifier,Facts_Set(Tagged(Tag(Boolean),Const_Tuple(Constant(Number))),Tagged(Tag(Boolean),Const_Tuple(Constant(Number)))))))
)

# Rule Declarations

rel grandparent(a, b) = parent(a, b), parent(b, c)
rel exists(a) = exist1(a) \/ exist2(b)
rel sum(a + b) = digit1(a) /\ digit2(b)
rel 1.0::eq(a == b) :- bool1(a), bool2(b)
rel andRel(a and b) :- bool1(a), bool2(b)
rel negRel(!a, -b) :- bool1(a), num2(b)
rel negStr((-a) as String) = num(a)

==>

Program(
  Item(Relation_Decl(Rule_Decl(Keyword(rel),Atom(Identifier,Param_List(Expr(Constant(Identifier)),Expr(Constant(Identifier)))),Formula(Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier)),Expr(Constant(Identifier))))),LogicOp,Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier)),Expr(Constant(Identifier))))))))),
  Item(Relation_Decl(Rule_Decl(Keyword(rel),Atom(Identifier,Param_List(Expr(Constant(Identifier)))),Formula(Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))),LogicOp,Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))))))),
  Item(Relation_Decl(Rule_Decl(Keyword(rel),Atom(Identifier,Param_List(Expr(Expr(Constant(Identifier)),ArithOp,Expr(Constant(Identifier))))),Formula(Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))),LogicOp,Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))))))),
  Item(Relation_Decl(Rule_Decl(Keyword(rel),Tagged(Tag(Number),Atom(Identifier,Param_List(Expr(Expr(Constant(Identifier)),CompareOp,Expr(Constant(Identifier)))))),Formula(Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))),LogicOp,Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))))))),
  Item(Relation_Decl(Rule_Decl(Keyword(rel),Atom(Identifier,Param_List(Expr(Expr(Constant(Identifier)),WordOp,Expr(Constant(Identifier))))),Formula(Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))),LogicOp,Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))))))),
  Item(Relation_Decl(Rule_Decl(Keyword(rel),Atom(Identifier,Param_List(Expr(LogicOp,Expr(Constant(Identifier))),Expr(ArithOp,Expr(Constant(Identifier))))),Formula(Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))),LogicOp,Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))))))),
  Item(Relation_Decl(Rule_Decl(Keyword(rel),Atom(Identifier,Param_List(Expr(Expr(Expr(ArithOp,Expr(Constant(Identifier)))),Keyword(as),Type))),Formula(Atom(Identifier,Param_List(Expr(Constant(Identifier))))))))
)

# Query Declarations

query your_mom

==>

Program(Item(Query_Decl(Keyword(query),Identifier)))