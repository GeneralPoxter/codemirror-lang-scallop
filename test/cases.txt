# Constant Declarations

const bool_a = true
const bool_b : bool = false

const num_a = 1
const num_b = 0.1
const num_c : i32 = 2

const str_a = "hello"
const str_b : String = "one\"\\two"

==>

Program(
  Item(ConstDecl(Keyword(const),Var(Identifier),AssignOp,Constant(Boolean))),
  Item(ConstDecl(Keyword(const),Var(Identifier,Type),AssignOp,Constant(Boolean))),
  Item(ConstDecl(Keyword(const),Var(Identifier),AssignOp,Constant(Number))),
  Item(ConstDecl(Keyword(const),Var(Identifier),AssignOp,Constant(Number))),
  Item(ConstDecl(Keyword(const),Var(Identifier,Type),AssignOp,Constant(Number))),
  Item(ConstDecl(Keyword(const),Var(Identifier),AssignOp,Constant(String))),
  Item(ConstDecl(Keyword(const),Var(Identifier,Type),AssignOp,Constant(String)))
)

# Type Declarations

type a = i32
type b <: bool
type parent(String, String)
type parent(a: String, b: String)
type mixAndMatch(bound String, b: String, String)
type $mixAndMatch(a, bound b: bool, c: char) -> i128
type $foo(String, Tensor, i32) -> u64
type $py_eval_number(s: String) -> f32
type face_name(bound face: Tensor, bound list: String, name: String)

==>

Program(
  Item(TypeDecl(Keyword(type),Identifier,AssignOp,Type)),
  Item(TypeDecl(Keyword(type),Identifier,AssignOp,Type)),
  Item(TypeDecl(Keyword(type),Identifier,ParamList(Type,Type))),
  Item(TypeDecl(Keyword(type),Identifier,ParamList(Var(Identifier,Type),Var(Identifier,Type)))),
  Item(TypeDecl(Keyword(type),Identifier,ParamList(Adornment,Type,Var(Identifier,Type),Type))),
  Item(TypeDecl(Keyword(type),FFIdentifier,ParamList(Var(Identifier),Adornment,Var(Identifier,Type),Var(Identifier,Type)),Type)),
  Item(TypeDecl(Keyword(type),FFIdentifier,ParamList(Type,Type,Type),Type)),
  Item(TypeDecl(Keyword(type),FFIdentifier,ParamList(Var(Identifier,Type)),Type)),
  Item(TypeDecl(Keyword(type),Identifier,ParamList(Adornment,Var(Identifier,Type),Adornment,Var(Identifier,Type),Var(Identifier,Type))))
)

# Fact Declarations

rel empty = {}
rel digit = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
rel object_color = {
  0.98::(0, "red"), 0.01::(0, "green"), 0.01::(0, "blue"),
  0.01::(1, "red"), 0.98::(1, "green"), 0.01::(1, "blue"),
  0.02::(2, "red"), 0.97::(2, "green"), 0.01::(2, "blue"),
}
rel bool_tag = { true::(3.5,); false::(4.5) }

==>

Program(
  Item(RelationDecl(FactSetDecl(Keyword(rel),Identifier,AssignOp,FactSet))),
  Item(RelationDecl(FactSetDecl(Keyword(rel),Identifier,AssignOp,FactSet(ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)),ConstTuple(Constant(String)))))),
  Item(RelationDecl(FactSetDecl(Keyword(rel),Identifier,AssignOp,FactSet(Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))),Tagged(Tag(Number),ConstTuple(Constant(Number),Constant(String))))))),
  Item(RelationDecl(FactSetDecl(Keyword(rel),Identifier,AssignOp,FactSet(Tagged(Tag(Boolean),ConstTuple(Constant(Number))),Tagged(Tag(Boolean),ConstTuple(Constant(Number)))))))
)

# Rule Declarations

rel grandparent(a, b) = parent(a, b), parent(b, c)
rel exists(a) = exist1(a) \/ exist2(b)
rel sum(a + b) = digit1(a) /\ digit2(b)
rel 1.0::eq(a == b) :- bool1(a), bool2(b)
rel andRel(a && b) :- bool1(a), bool2(b)
rel negRel(!a, -b) :- bool1(a), num2(b)
rel negStr((-a) as String) = num(a)
rel derived_kinship(p1, p3, r3) = p1 != p3 and derived_kinship(p1, p2, r1) and derived_kinship(p2, p3, r2) and composition(r2, r1, r3)

==>

Program(
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier)))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier)))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Expr(Identifier),ArithOp,Expr(Identifier)))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier)))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Tagged(Tag(Number),Atom(Identifier,ParamList(Expr(Expr(Identifier),CompareOp,Expr(Identifier))))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier)))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Expr(Identifier),LogicOp,Expr(Identifier)))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier)))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(LogicOp,Expr(Identifier)),Expr(ArithOp,Expr(Identifier)))),AssignOp,Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier)))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier)))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Expr(Expr(ArithOp,Expr(Identifier))),Keyword(as),Type))),AssignOp,Formula(Atom(Identifier,ParamList(Expr(Identifier))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier),Expr(Identifier))),AssignOp,Formula(Formula(Formula(Formula(Constraint(Expr(Expr(Identifier),CompareOp,Expr(Identifier)))),WordOp,Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier),Expr(Identifier))))),WordOp,Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier),Expr(Identifier))))),WordOp,Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier),Expr(Identifier))))))))
)

# Query Declarations

query your_mom

==>

Program(
  Item(QueryDecl(Keyword(query),Identifier))
)

# Aggregations

rel num_animals(n) :- n = count(o: name(o, "animal"))
rel num_edges(n) = n := count(a, b: edge(a, b))
rel num_obj_per_color(col, num) = num := count(obj: obj_color(obj, col))
rel num_obj_per_color(col, num) = num := count(obj: obj_color(obj, col) where col: colors(col))
rel total_sales(s) = s := sum(sp: sales_1(p, sp))
rel best_student(n) = _ := max[n](s: exam_grades(n, s))
rel path(a, c) = exists(b: path(a, b) and edge(b, c))
rel target(b) = b := forall(o: object(o) implies obj_shape(o, SPHERE))
rel identity(id, name) = name := top<1>(name: face_name(img, $string_concat(list), name), face_image(id, img), names(list))

==>

Program(
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,Var(Identifier),Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Constant(String)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,Var(Identifier),Var(Identifier),Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,Var(Identifier),Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,Var(Identifier),Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier)))),Keyword(where),Var(Identifier),Formula(Atom(Identifier,ParamList(Expr(Identifier))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,Var(Identifier),Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,AggregationArgs(Var(Identifier)),Var(Identifier),Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))),AssignOp,Formula(Aggregation(BoolAggregator,Var(Identifier),Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier)))),WordOp,Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,Var(Identifier),Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier)))),WordOp,Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier)))))))))),
  Item(RelationDecl(RuleDecl(Keyword(rel),Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))),AssignOp,Formula(Aggregation(Var(Identifier),AssignOp,Aggregator,AggregationArgs(Constant(Number)),Var(Identifier),Formula(Formula(Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(FFIdentifier,ParamList(Expr(Identifier))),Expr(Identifier)))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier),Expr(Identifier))))),LogicOp,Formula(Atom(Identifier,ParamList(Expr(Identifier))))))))))
)

# FA Type Declarations

@gpt_encoder type $embed_text(String) -> Tensor

@face_detection(["cropped-image"], dump_image=true)
type face(bound img: Tensor, id: u32, face_img: Tensor)

@clip(["cat", "dog"], prompt="a photo of a {{}}")
type cat_or_dog(bound img: Tensor, cat_or_dog: String)

@owl_vit(
  object_queries=["cube", "sphere", "cylinder"],
  output_fields=["class", "cropped-image"],
  input_obj_count=true,
  score_threshold=0.01,
  score_multiplier=1,
  expand_crop_region=10,
  dump_image=true
)
type find_shapes(
  bound img: Tensor,
  bound obj_count: u32,
  id: u32,
  class: String,
  cropped_image: Tensor,
)

@gpt_extract_info(
  header="Please extract dates and their relationships from the provided question.",
  prompts=[
    "What are the mentioned MM/DD/YYYY dates in JSON format?",
    "What is the goal in JSON format?",
    "What are the relationships of the dates in JSON format?"
  ],
  examples=[
    (
      ["Yesterday is February 14, 2019. What is the date 1 month ago?"],
      [
        [("yesterday", "02/14/2019")],
        [("1-month-ago")],
        [("yesterday", "today", "1 day"), ("1-month-ago", "today", "1 month")]
      ]
    ),
  ],
  model="gpt-4",
  cot=[false,false,true],
  debug=true,
)
type extract_mentioned_date(bound question: String, label: String, date: DateTime),
     extract_goal          (bound question: String, goal: String),
     extract_relationship  (bound question: String, earlier_date: String, later_date: String, diff: Duration)

==>

Program(
  Item(TypeDecl(FAIdentifier,Keyword(type),FFIdentifier,ParamList(Type),Type)),
  Item(TypeDecl(FAIdentifier,ParamList(FAParam(FAParamVal(FAParamVal(String))),FAParam(Identifier,AssignOp,FAParamVal(Boolean))),Keyword(type),Identifier,ParamList(Adornment,Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type)))),
  Item(TypeDecl(FAIdentifier,ParamList(FAParam(FAParamVal(FAParamVal(String),FAParamVal(String))),FAParam(Identifier,AssignOp,FAParamVal(String))),Keyword(type),Identifier,ParamList(Adornment,Var(Identifier,Type),Var(Identifier,Type)))),
  Item(TypeDecl(FAIdentifier,ParamList(FAParam(Identifier,AssignOp,FAParamVal(FAParamVal(String),FAParamVal(String),FAParamVal(String))),FAParam(Identifier,AssignOp,FAParamVal(FAParamVal(String),FAParamVal(String))),FAParam(Identifier,AssignOp,FAParamVal(Boolean)),FAParam(Identifier,AssignOp,FAParamVal(Number)),FAParam(Identifier,AssignOp,FAParamVal(Number)),FAParam(Identifier,AssignOp,FAParamVal(Number)),FAParam(Identifier,AssignOp,FAParamVal(Boolean))),Keyword(type),Identifier,ParamList(Adornment,Var(Identifier,Type),Adornment,Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type)))),
  Item(TypeDecl(FAIdentifier,ParamList(FAParam(Identifier,AssignOp,FAParamVal(String)),FAParam(Identifier,AssignOp,FAParamVal(FAParamVal(String),FAParamVal(String),FAParamVal(String))),FAParam(Identifier,AssignOp,FAParamVal(FAParamVal(FAParamVal(FAParamVal(String)),FAParamVal(FAParamVal(FAParamVal(FAParamVal(String),FAParamVal(String))),FAParamVal(FAParamVal(FAParamVal(String))),FAParamVal(FAParamVal(FAParamVal(String),FAParamVal(String),FAParamVal(String)),FAParamVal(FAParamVal(String),FAParamVal(String),FAParamVal(String))))))),FAParam(Identifier,AssignOp,FAParamVal(String)),FAParam(Identifier,AssignOp,FAParamVal(FAParamVal(Boolean),FAParamVal(Boolean),FAParamVal(Boolean))),FAParam(Identifier,AssignOp,FAParamVal(Boolean))),Keyword(type),Identifier,ParamList(Adornment,Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type)),Identifier,ParamList(Adornment,Var(Identifier,Type),Var(Identifier,Type)),Identifier,ParamList(Adornment,Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type),Var(Identifier,Type)))))