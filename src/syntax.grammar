@top Program { Item* }

@precedence { op @left, exprVar, exprConst }

@skip { space | LineComment }

commaSep<content> {
  (content ("," content)* ","?)?
}

commaSep1<content> {
  content ("," content)* ","?
}

semiSep<content> {
  (content (";" content)* ";"?)?
}

barSep<content> {
  content ("|" content)*
}

Boolean { @specialize<Identifier, "true" | "false"> }

unaryOp { ArithOp<"-"> | LogicOp<"!"> }

binaryOp {
  ArithOp<"+" | "-" | "*" | "/"| "%" | "^"> |
  LogicOp<"&&" | "||"> | CompareOp
}

formulaOp {
  LogicOp<"," | "/\\" | "\\/" | "=>"> |
  WordOp<"and" | "or" | "implies">
}

WordOp<term> { @specialize<Identifier, term> }

Keyword<term> { @specialize[@name={term}]<Identifier, term> }

Item {
  TypeDecl |
  RelationDecl |
  ConstDecl |
  QueryDecl
}

Type { @specialize<Identifier, 
  "u8" | "u16" | "u32" | "u64" | "u128" | "usize" |
  "i8" | "i16" | "i32" | "i64" | "i128" | "isize" |
  "f32" | "f64" | "char" | "bool" | "String" |
  "DateTime" | "Duration" | "Tensor"> | CustomType }

CustomType {
  Identifier
}

Adornment { @specialize<Identifier, "bound" | "free" >}

untypedVar[@name="Var"] { Identifier }
typedVar[@name="Var"] { Identifier ":" Type }

ParamList<expr> { ~ambigTag "(" commaSep<expr> ~ambigParams ")" }

FAParamVal {
  Boolean | Number | String |
  "[" commaSep<FAParamVal> "]" |
  "(" commaSep<FAParamVal> ")"
}

FAParam {
  (Identifier AssignOp<"=">)? FAParamVal
}

EnumTypeIdentifier {
  Identifier ~customType
}

EnumConst {
  Identifier (AssignOp<"="> Constant)?
}

ADTIdentifier {
  Identifier ~customType
}

TypeDecl {
  (FAIdentifier ParamList<FAParam>?)? Keyword<"type"> (
    Identifier ~customType (AssignOp<"="> | AssignOp<"<:">) Type |
    EnumTypeIdentifier AssignOp<"="> barSep<EnumConst> |
    ADTIdentifier AssignOp<"="> barSep<CustomType ParamList<Type>> |
    commaSep1<Identifier ParamList<Adornment? (Type | typedVar)>> |
    FFIdentifier ParamList<Adornment? (Type | typedVar | untypedVar)> ("->" Type)?
  )
}

RelationDecl {
  FactDecl | FactSetDecl | RuleDecl
}

Tag {
  Boolean | Number
}

Tagged<expr> {
  Tag "::" expr ~ambigTag
}

FactDecl {
  Keyword<"rel"> (Identifier | Tagged<Identifier> ) ParamList<ConstExpr>
}

FactSetDecl {
  Keyword<"rel"> Identifier AssignOp<":=" | "="> FactSet
}

FactSet {
  "{" (
    commaSep<ConstTuple> ~ambigFacts |
    commaSep<Tagged<ConstTuple>> ~ambigFacts |
    semiSep<Tagged<ConstTuple>> ~ambigFacts
  ) "}"
}

ConstIdentifier {
  Identifier ~constName
}

constVar[@name="Var"] { ConstIdentifier (":" Type)? }

Constant {
  Boolean | Number | String | ConstIdentifier
}

ConstDecl {
  Keyword<"const"> commaSep1<constVar AssignOp<":=" | "="> Constant>
}

ConstTuple {
  Constant | "(" commaSep<Constant> ")"
}

ConstExpr[@dynamicPrecedence=1] {
  Constant ~constant |
  ConstExpr !op binaryOp ConstExpr | unaryOp ConstExpr |
  FFIdentifier ParamList<ConstExpr> |
  Keyword<"if"> ConstExpr Keyword<"then"> ConstExpr Keyword<"else"> ConstExpr |
  "(" ConstExpr ")"
}

Expr {
  !exprVar Identifier ~constName |
  !exprConst Constant ~constant |
  Expr !op binaryOp Expr | unaryOp Expr |
  FFIdentifier ParamList<Expr> |
  Keyword<"if"> Expr Keyword<"then"> Expr Keyword<"else"> Expr |
  Expr !op Keyword<"as"> Type |
  "(" Expr ~ambigExpr  ")"
}

Atom {
  Identifier ParamList<Expr>
}

Formula {
  Atom | LogicOp<"~"> Atom | WordOp<"not"> Atom |
  Formula !op formulaOp Formula |
  Constraint | Aggregation |
  "(" Formula ")"
}

Constraint {
  Expr ~ambigExpr
}

RuleDecl {
  Keyword<"rel"> (Atom | Tagged<Atom> ) AssignOp<":-" | ":=" | "="> Formula
}

Aggregator { @extend<Identifier,
  "count" | "count!" | "top" | 
  "sum" | "prod" | "min" | "max" |
  "exists" | "forall" | "unique"> }

BoolAggregator { @extend<Identifier, "forall" | "unique"> }

AggregationArgs {
  "[" commaSep1<untypedVar> "]" | "<" commaSep1<Constant> ">"
}

Aggregation {
  untypedVar AssignOp<":=" | "="> Aggregator AggregationArgs? "(" commaSep1<untypedVar> ":" Formula
    (Keyword<"where"> commaSep1<untypedVar> ":" Formula)? ")" |
  BoolAggregator "(" commaSep1<untypedVar> ":" Formula ")"
}

QueryDecl {
  Keyword<"query"> Identifier | Keyword<"query"> Atom
}

@tokens {
  FFIdentifier { "$" Identifier }
  FAIdentifier { "@" Identifier }
  Identifier { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  Number { (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*) }

  String { '"' (!["\\] | "\\" _)* '"' }

  LineComment { "//" ![\n]* }

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  AssignOp<expr> { expr }
  CompareOp { ("<" | ">") "="? | "==" | "!=" }

  space { @whitespace+ }

  @precedence {
    LineComment, String, Number, ArithOp
  }
}

@detectDelim
