@top Program { Item* }

@precedence {
  op @left,
  exprVar, exprConst,
  constraintVar, constraintConst,
  exprFF @cut
}

@skip { space | LineComment }

ListItem<content> { content }

commaSep<content> {
  (ListItem<content> ("," ListItem<content>)* ","?)?
}

commaSep1<content> {
  ListItem<content> ("," ListItem<content>)* ","?
}

semiSep<content> {
  (ListItem<content> (";" ListItem<content>)* ";"?)?
}

barSep<content> {
  ListItem<content> ("|" ListItem<content>)*
}

Boolean { @specialize<Identifier, "true" | "false"> }

unaryOp { ArithOp<"-"> | LogicOp<"!"> }

binaryOp {
  ArithOp<"+" | "-" | "*" | "/"| "%" | "^"> |
  LogicOp<"&&" | "||"> | CompareOp
}

formulaOp {
  LogicOp<"," | "/\\" | "\\/" | "=>"> |
  WordOp<"and" | "or" | "implies">
}

CompareOp {
  compareOp<"<"> | compareOp<">"> | compareOp<"<=" | ">=" | "==" | "!=">
}

WordOp<term> { @specialize<Identifier, term> }

Keyword<term> { @specialize[@name={term}]<Identifier, term> }

Item {
  TypeDecl |
  RelationDecl |
  ConstDecl |
  QueryDecl
}

Type { @specialize<Identifier, 
  "u8" | "u16" | "u32" | "u64" | "u128" | "usize" |
  "i8" | "i16" | "i32" | "i64" | "i128" | "isize" |
  "f32" | "f64" | "char" | "bool" | "String" |
  "DateTime" | "Duration" | "Tensor"> | CustomType }

CustomType {
  Identifier ~customType
}

Adornment { @specialize<Identifier, "bound" | "free" > }

untypedVar[@name="Var"] { Identifier ~untypedVar }
typedVar[@name="Var"] { Identifier ":" Type }

ParamList<expr> { ~tag ~relation "(" commaSep<expr> ~params ")" }

FAParamVal {
  Boolean | Number | String |
  "[" commaSep<FAParamVal> "]" |
  "(" commaSep<FAParamVal> ")"
}

FAParam {
  (Identifier AssignOp<"=">)? FAParamVal
}

EnumTypeIdentifier {
  Identifier ~customType
}

EnumConst {
  Identifier (AssignOp<"="> Constant)?
}

ADTIdentifier {
  Identifier ~customType
}

Constructor {
  Identifier
}

TypeDecl {
  (FAIdentifier ParamList<FAParam>?)? Keyword<"type"> (
    CustomType (AssignOp<"="> | AssignOp<"<:">) Type |
    EnumTypeIdentifier AssignOp<"="> barSep<EnumConst> |
    ADTIdentifier AssignOp<"="> barSep<Constructor ParamList<Type>> |
    commaSep1<Identifier ParamList<Adornment? (Type | typedVar)>> |
    FFIdentifier ParamList<Adornment? (Type | typedVar | untypedVar)> ("->" Type)?
  )
}

RelationIdentifier {
  Identifier ~relation
}

RelationDecl {
  FactDecl | FactSetDecl | RuleDecl
}

Tag {
  Boolean | Number
}

Tagged<expr> {
  Tag "::" expr ~tag
}

FactDecl {
  Keyword<"rel"> (RelationIdentifier | Tagged<RelationIdentifier> ) ParamList<ConstExpr>
}

FactSetDecl {
  Keyword<"rel"> RelationIdentifier AssignOp<":=" | "="> FactSet
}

FactSet {
  "{" (
    commaSep<ConstTuple | Tagged<ConstTuple>> ~facts |
    semiSep<Tagged<ConstTuple>> ~facts
  ) "}"
}

Constant {
  Boolean | Number | String | untypedVar
}

ConstEntity {
  Constructor ParamList<Constant | ConstEntity>
}

constVar[@name="Var"] { Identifier (":" Type)? }

ConstDecl {
  Keyword<"const"> commaSep1<constVar AssignOp<":=" | "="> (Constant | ConstEntity)>
}

ConstTuple {
  Constant | "(" commaSep<Constant> ")"
}

ConstExpr[@dynamicPrecedence=1] {
  Constant ~constant |
  ConstExpr !op binaryOp ConstExpr | unaryOp ConstExpr |
  FFIdentifier ParamList<ConstExpr> |
  Keyword<"if"> ConstExpr Keyword<"then"> ConstExpr Keyword<"else"> ConstExpr |
  "(" ConstExpr ")"
}

Constraint {
  !constraintVar untypedVar |
  !constraintConst Constant ~constant |
  Constraint !op binaryOp Constraint | unaryOp Constraint |
  FFIdentifier ParamList<Expr> |
  Keyword<"if"> Constraint Keyword<"then"> Constraint Keyword<"else"> Constraint |
  "(" Constraint ~expr  ")"
}

Expr {
  !exprVar untypedVar |
  !exprConst Constant ~constant |
  Expr !op binaryOp Expr | unaryOp Expr |
  !exprFF FFIdentifier ParamList<Expr> | Constraint |
  Expr !op Keyword<"as"> Type |
  Keyword<"new"> Constructor ParamList<Expr> |
  "(" Expr ~expr  ")"
}

typeTag {
  ~untypedVar compareOp<"<"> Type compareOp<">">
}

Atom {
  Identifier typeTag? ParamList<Expr>
}

Formula {
  Atom | LogicOp<"~"> Atom | WordOp<"not"> Atom |
  Formula !op formulaOp Formula |
  Keyword<"case"> untypedVar Keyword<"is"> Entity |
  Constraint ~expr | Aggregation |
  "(" Formula ")"
}

Entity {
  Constructor ParamList<Constant | untypedVar | Entity>
}

RuleDecl {
  Keyword<"rel"> (Atom | Tagged<Atom> ) AssignOp<":-" | ":=" | "="> Formula
}

Aggregator { @extend<Identifier,
  "count" | "sum" | "prod" | "min" | "max" |
  "exists" | "forall" | "unique"> }
hardAggregator[@name="Aggregator"] { @extend<Identifier, "count"> }
boolAggregator[@name="Aggregator"] { @extend<Identifier, "forall" | "unique"> }
topAggregator[@name="Aggregator"] { @extend<Identifier, "top"> "<" Number ">" }

AggregationArgs {
  "[" commaSep1<untypedVar> "]"
}

Aggregation {
  untypedVar AssignOp<":=" | "="> ((Aggregator | hardAggregator "!") AggregationArgs? | topAggregator)
  "(" commaSep1<untypedVar> ":" Formula (Keyword<"where"> commaSep1<untypedVar> ":" Formula)? ")" |
  boolAggregator "(" commaSep1<untypedVar> ":" Formula ")"
}

QueryDecl {
  Keyword<"query"> Identifier | Keyword<"query"> Atom
}

@tokens {
  FFIdentifier { "$" Identifier }
  FAIdentifier { "@" Identifier }
  Identifier { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  Number { (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*) }

  String { '"' (!["\\] | "\\" _)* '"' }

  LineComment { "//" ![\n]* }

  ArithOp<expr> { expr }
  LogicOp<expr> { expr }
  AssignOp<expr> { expr }
  compareOp<expr> { expr }

  space { @whitespace+ }

  @precedence {
    LineComment, String, Number, ArithOp
  }
}

@detectDelim
